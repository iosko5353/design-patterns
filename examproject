package stateAndObserver;

public class ObserverAndStatePatternMain {

    public static void main(String[] args) {

        Context context = new Context();

        StartState startState = new StartState();
        startState.doAction(context);

        System.out.println(context.getState().toString());

        Subject topic = new Subject();
        Subject topic1 = new Subject();
        Subject topic2 = new Subject();
        Observer obs1 = new Player("Player 1");
        Observer obs2 = new Player("Player 1");
        Observer obs3 = new Player("Player 1");

        topic.subscribe(obs1);
        topic1.subscribe(obs2);
        topic2.subscribe(obs3);

        topic.setName("конят как се храни");
        topic1.setName("конят как спи");
        topic2.setName("конят в нормлано състояние");
        HorseState horseState = new HorseState();
        horseState.doAction(context);

        System.out.println(context.getState().toString());

        StopState stopState = new StopState();
        stopState.doAction(context);

        System.out.println(context.getState().toString());
    }
}
package stateAndObserver;

public class Context {
    private State state;

    public Context() {
        state = null;
    }

    public void setState(State state) {
        this.state = state;
    }

    public State getState() {
        return state;
    }
}
package stateAndObserver;

public class HorseState implements State {
    public void doAction(Context context) {
        System.out.println("Конят се храни и играчът го наблюдава");
        context.setState(this);
    }
}
package stateAndObserver;

public interface Observable {
    public void subscribe(Observer observer);
    public void unsubscribe(Observer observer);
    public void notifyObservers();
    public String getUpdate();
}
package stateAndObserver;

public interface Observer {
    public void update();
    public void setTopic(Observable topic);
}
package stateAndObserver;

public class Player implements Observer{

    private String name;
    private Observable topic;

    public Player(String name) {
        this.setName(name);
    }

    @Override
    public void update() {

        String topicName = topic.getUpdate();
        System.out.println(this.getName() + " наблюдава " + topicName);

    }
    @Override
    public void setTopic(Observable topic) {
        this.topic = topic;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }
}
package stateAndObserver;

public class StartState implements State {
    public void doAction(Context context) {
        System.out.println("Конят започва да се храни и играчът получава съобщение");
        context.setState(this);
    }

}
package stateAndObserver;

public interface State {
    public void doAction(Context context);
}
package stateAndObserver;

public class StopState implements State {
    public void doAction(Context context) {
        System.out.println("конят е в нормално състояние и играча не получава съобщение");
        context.setState(this);
    }
}package stateAndObserver;
import java.util.ArrayList;
import java.util.List;


public class Subject implements Observable {

    private List<Observer> observers = new ArrayList<Observer>();
    private String name;

    public void setName(String name) {
        this.name = name;
        this.notifyObservers();
    }

    @Override
    public void subscribe(Observer observer) {
        this.observers.add(observer);
        observer.setTopic(this);
    }

    @Override
    public void unsubscribe(Observer observer) {
        this.observers.remove(observer);
    }

    @Override
    public void notifyObservers() {
        for(Observer observer: this.observers) {
            observer.update();
        }
    }

    @Override
    public String getUpdate() {
        return this.name;
    }

}
